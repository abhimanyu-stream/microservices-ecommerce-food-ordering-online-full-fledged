

spring.application.name = user-service

#port on which the application should run
#server.port= 8081
server.port=9595


#1. CREATE A SCHEMA WITH NAME applicantservice


########## 2.  IMPORTANT EXTRA  REQUIRED THINGS START##########
#   ONECE START THIS APPLICATION AND DO INSERT MANUALLY

#INSERT INTO role VALUES(1,'ROLE_ADMIN');
#INSERT INTO role VALUES(2,'ROLE_USER');
#INSERT INTO role VALUES(3,'ROLE_MODERATOR');


#To provide ROLE_ADMIN to user with id 1 run below sql, by default during signup if user donot mention role in request payload then by default role provide by this application will be ROLE_USER.
#Refer SignUpRequest for request payload

#com.food.delivery.dto.SignUpRequest;
#INSERT INTO user_roles VALUES(1,1);
########## IMPORTANT EXTRA  REQUIRED THINGS END##########




# MySQL DB JDBC

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/fooddeliveryapp?allowPublicKeyRetrieval=true&useSSL=false
#spring.datasource.url=jdbc:mysql://localhost/fooddeliveryapp?allowPublicKeyRetrieval=true&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

# Hibernate Properties
spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#below properties will automatically creates and updates database schema
spring.jpa.hibernate.hbm2ddl.auto=update
spring.jpa.hibernate.show_sql=true
spring.jpa.hibernate.format_sql=true
spring.jpa.hibernate.connection.pool_size=5
spring.jpa.hibernate.current_session_context_class=thread

### KeyStore start####


### NOTE:- Current using PKCE type keystore only[ not keystore.jks or  keystore.cer], mentioned below###  \keys\keystore.p12
app.jwt.keyStorePKCE12-location=classpath:/keys/keystore.p12
app.jwt.destPKCE12-alias=signjwt
app.jwt.keyStorePKCE12-password=fooddelivery
app.jwt.keyStorePKCE12.deststore-password=fooddelivery
app.jwt.keyStorePKCE12.destkey-password=fooddelivery
#deststoretype PKCS12 
### Current using PKCE type keystore only, mentioned Above###
### KeyStore End ####

###
#https://www.calculateme.com/time/milliseconds/to-minutes/60000
#For Production Mode
#3,600,000 Milliseconds = 60 Minutes
#app.jwtExpirationMs= 3600000
#86,400,000 Milliseconds = 1,440 Minutes
#app.jwtRefreshExpirationMs= 86400000

## For test Mode
#60,000 Milliseconds = 1 Minute
app.jwtExpirationMs= 60000 
#120,000 Milliseconds = 2 Minutes
app.jwtRefreshExpirationMs= 120000

###



##################START ADMIN SERVER####################
# BELOW IS CLIENT CONFIGURATION #

# URL where Admin Server is running
#spring.boot.admin.client.url=http://localhost:8383
# server.port=0 its means is random port, so there is no collision on port 8383
# otherwise do as below
# client instances port are below
# NOTE:- server.port=0 MEAN ANY AVAIABLE PORT 

# Expose all the Actuator endpoints

spring.boot.admin.client.enabled=
spring.boot.admin.client.url= 
spring.boot.admin.client.auto-registration=







# Provide username and password for Spring Boot Admin Server
# To connect to the client
# BELOW ARE CLIENT USERNAME AND PASSWORD TOO I.E SAME
spring.boot.admin.client.instance.metadata.user.name=abhimanyu123
spring.boot.admin.client.instance.metadata.user.password=abhimanyu123password
# Credentials to authenticate with the Admin Server
# BELOW ARE SERVER USERNAME AND PASSWORD SO THAT CLIENTS WOULD BE GET REGISTERED THERE ITSELF, I.E IS ADMIN SERVER
# AS SPRING SECURITY IS ENABLED HERE TOO
# Spring Security START#

# If you don't set this, username 'user' will be used by default
# And a password will be auto-generated each time your app starts
# Such password is visible in the console during app startup
# BELOW ARE CLIENT USERNAME AND PASSWORD, SO THAT CLIENTS API ENDPOINT CAN BE ACCESSED AS SPRING SECURITY IS ENABLED HERE
spring.security.user.name=abhimanyu-kumar
spring.security.user.password=abhimanyu-kumar
# Spring Security END#
spring.boot.admin.client.username=abhimanyu123-username
spring.boot.admin.client.password=abhimanyu123-password
##################END ADMIN SERVER####################

# actuactor START#
management.endpoints.web.exposure.include=*
# [NOTE:-]mention only those uris which is required to publish and also change the base default url[actuactor]
# Show details in Health check section
management.endpoint.health.show-details=always
# actuactor END#





###spring.config.import property has been defined START###


###spring.config.import property has been defined END###







########## Swagger3 API Documentation Start##########
api.version=1.0
tos.uri=terms-of-service
toc.uri=terms-of-condition
api.server.url=localhost:9595/
api.server.url.prod=
api.server.url.qa=
api.server.url.dev=
api.description=The User API is used to create, update, and delete users and reset its password, change the user's Role if required form existing Role of User [  ROLE_MODERATOR,  ROLE_ADMIN,  ROLE_USER]  . If an account is created, the user will be granted the <strong>ROLE_USER</strong> role. The Post API is for creating post and doing CRUD operation . Each endpoints can be accessed by User's Role Type[  ROLE_MODERATOR,  ROLE_ADMIN,  ROLE_USER]
springdoc.swagger-ui.operationsSorter=abhimanyu
springdoc.swagger-ui.tagsSorter=abhimanyu

########## Swagger3 API Documentation End##########
